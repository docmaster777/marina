<?php

namespace app\modules\admin\models;

use Yii;

/**
 * This is the model class for table "product".
 *
 * @property int $id
 * @property int $category_id
 * @property string $name
 * @property string $keywords
 * @property string $description
 * @property string $alias
 * @property string $content
 * @property double $price
 * @property int $hit
 * @property int $new
 * @property int $sale
 */
class Product extends \yii\db\ActiveRecord
{
    public function behaviors()
    {
        return [
            'image' => [
                'class' => 'rico\yii2images\behaviors\ImageBehave',
            ]
        ];
    }

    public $image;
    public $gallery;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'product';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['category_id', 'hit', 'new', 'sale'], 'integer'],
            [['content', 'artikul'], 'string'],
            [['price'], 'number'],
            [['alias'], 'required'],
            [['name', 'keywords', 'description', 'alias'], 'string', 'max' => 255],
            [['image'], 'file', 'extensions' => 'png, jpg'],
            [['gallery'], 'file', 'extensions' => 'png, jpg', 'maxFiles' => 4],
        ];
    }
    public function getCategory(){
        return $this->hasOne(Category::className(), ['alias' => 'category_alias']);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'category_id' => 'Категория',
            'name' => 'Name',
            'keywords' => 'Keywords',
            'description' => 'Description',
            'alias' => 'Alias',
            'content' => 'Content',
            'price' => 'Price',
            'hit' => 'Hit',
            'new' => 'New',
            'sale' => 'Sale',
        ];
    }

    //    ---- Загрузка одной картинки при создании ---
    public function uploadCreate()
    {
        if ($this->validate()) {
            $path = 'upload/store/' . $this->image->baseName . '.' . $this->image->extension;
            $this->image->saveAs($path);
            $this->attachImage($path, true);
            @unlink($path);
            return true;
        }else{
            return false;
        }
    }

    //    ---- Загрузка многих картинок при создании ---
    public function uploadsCreate()
    {
        if($this->validate()){
            foreach($this->gallery as $file){
                $path = 'upload/store/' . $file->baseName . '.' . $file->extension;
                $file->saveAs($path);
                $this->attachImage($path);
                @unlink($path);
            }
            return true;
        }else{
            return false;
        }
    }

    //--- Удаление всех картинок при удалении продукта (очистка файлов и папки и БД)---
    public function beforeDelete()
    {
        $image = Image::find()->andWhere(['itemId' => $this->id])->one();
        $name_madel = stristr($image->filePath, '/', true);

        $path_current_images = Image::find()->andWhere(['itemId' => $this->id])->all();

        if($path_current_images){
            foreach ($path_current_images as $current_image){
                unlink('upload/store/'.$current_image->filePath);
                $current_image->delete();
            }
        }
        rmdir('upload/store/' .$name_madel .'/' .$image->modelName . $this->id);

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    //--- Редактирование (update) одной картинки при обновлении продукта---

    public function updateImage($fileimg, $current_image)
    {
        if ($this->validate() & $fileimg ==!null) {

            if($current_image->filePath){
                unlink('upload/store/' . $current_image->filePath);
                $path = 'upload/store/' . $this->image->baseName . '.' . $this->image->extension;
                $this->image->saveAs($path);
                $this->attachImage($path, true);
                @unlink($path);
            }

        } else {
            return false;
        }
    }

    //--- Редактирование (update) многих картинок при обновлении продукта---
    public function updateImages()
    {
        foreach ($this->gallery as $file) {
            $path = 'upload/store/' . $file->baseName . '.' . $file->extension;
            $file->saveAs($path);
            $this->attachImage($path);
            @unlink($path);
        }
    }
}
